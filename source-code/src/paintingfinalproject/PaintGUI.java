/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paintingfinalproject;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * read "readme.java" in this package please
 * @author sailikk
 */
public class PaintGUI extends javax.swing.JFrame {
    
    BufferedImage image, tempImageForSave;
    static int CANVAS_WIDTH = 1200;
    static int CANVAS_HEIGHT = 800;
    private final JFileChooser openFileChooser;
    private final JFileChooser saveFileChooser;
    private Graphics2D g2;
    private int nowX, nowY, oldX, oldY;
    final DrawArea drawArea = new DrawArea();
    String operation = "";
    private int[][] pixels;
    private Point startDrag, endDrag;
    public static ArrayList<Paint> paintArrayList = new ArrayList<Paint>();

    /**
     * Creates new form PaintGUI 
     * pre: none 
     * post: GUI constructed
     */
    public PaintGUI() {
        initComponents();
        //jframe stuff
        setLocationRelativeTo(null);//sets location to centre
        setTitle("Sailik's Final Painting Project");
        
        //graphical stuff
        g2 = (Graphics2D) image.getGraphics();
        clear();
        g2.setStroke(new BasicStroke(5.0f));
        g2.setPaint(Color.black);
        operation = "brush";

        //file stuff
        openFileChooser = new JFileChooser();
        openFileChooser.setCurrentDirectory(new File("H:\\NetBeansProjects\\PaintingFinalProject"));
        openFileChooser.setFileFilter(new FileNameExtensionFilter("PNG images", "png"));
        openFileChooser.setFileFilter(new FileNameExtensionFilter("JPG images", "jpg"));
        openFileChooser.setFileFilter(new FileNameExtensionFilter("GIF images", "gif"));

        saveFileChooser = new JFileChooser();
        saveFileChooser.setCurrentDirectory(new File("H:\\NetBeansProjects\\PaintingFinalProject"));
        saveFileChooser.setFileFilter(new FileNameExtensionFilter("PNG images", "png"));
        saveFileChooser.setFileFilter(new FileNameExtensionFilter("JPG images", "jpg"));
        saveFileChooser.setFileFilter(new FileNameExtensionFilter("GIF images", "gif"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        strokeSelector = new javax.swing.JComboBox<>();
        image = new BufferedImage(CANVAS_WIDTH, CANVAS_HEIGHT, BufferedImage.TYPE_INT_RGB);
        canvas = new javax.swing.JLabel(new ImageIcon(image));
        sizeSelector = new javax.swing.JComboBox<>();
        openFileButton = new javax.swing.JButton();
        saveImageButton = new javax.swing.JButton();
        pickColourButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        strokeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Goatfur Handmade Brush", "Fill", "Rectangle", "Square", "Triangle", "Oval", "Circle" }));
        strokeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strokeSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(strokeSelector, gridBagConstraints);

        canvas.addMouseMotionListener(new MouseMotionEventDemo());
        canvas.addMouseListener(new MouseMotionEventDemo());
        getContentPane().add(drawArea);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(canvas, gridBagConstraints);

        sizeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Very Small", "Small", "Medium", "Big", "Very Big" }));
        sizeSelector.setSelectedItem("Medium");
        sizeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(sizeSelector, gridBagConstraints);

        openFileButton.setText("Open image...");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(openFileButton, gridBagConstraints);

        saveImageButton.setText("Save image...");
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(saveImageButton, gridBagConstraints);

        pickColourButton.setText("Pick Colour...");
        pickColourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickColourButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(pickColourButton, gridBagConstraints);

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(clearButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * selects the size of the brush strokes
     * pre: none
     * post: sets the size of the brush strokes depending on the option selected
     * @param evt 
     */
    private void sizeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeSelectorActionPerformed
        JComboBox comboBox = (JComboBox) evt.getSource();
        String size = (String) comboBox.getSelectedItem();

        switch (size) {
            case "Medium":
                g2.setStroke(new BasicStroke(10.0f));
                break;
            case "Very Small":
                g2.setStroke(new BasicStroke(1.0f));
                break;
            case "Small":
                g2.setStroke(new BasicStroke(5.0f));
                break;
            case "Big":
                g2.setStroke(new BasicStroke(15.0f));
                break;
            case "Very Big":
                g2.setStroke(new BasicStroke(30.0f));
                break;
            default:
                break;
        }
    }//GEN-LAST:event_sizeSelectorActionPerformed
/**
 * opens a file using JFileChooser
 * pre: none
 * post: image is loaded onto the canvas
 * @param evt 
 */
    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        int returnValue = openFileChooser.showOpenDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            Color temp2 = g2.getColor();
            ImageIcon icon = new ImageIcon(openFileChooser.getSelectedFile().getAbsolutePath());
            Image temp = icon.getImage();
            g2.drawImage(temp, 0, 0, null);
            repaint();
            g2.setColor(temp2);
        }
    }//GEN-LAST:event_openFileButtonActionPerformed
/**
 * saves the image using two helper methods
 * pre: none
 * post: the image is saved to specified file with the specified extension like .png
 * @param evt 
 */
    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        //convert the original image to an array
        imageToArray();
        //save the image
        saveImage();
    }//GEN-LAST:event_saveImageButtonActionPerformed
/**
 * Helper method for the saving of the image
 * pre: none
 * post: changes the image to an array
 */
    private void imageToArray() {
        int width = image.getWidth();
        int height = image.getHeight();
        tempImageForSave = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        pixels = new int[width][height];

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                pixels[i][j] = image.getRGB(i, j);
            }
        }
    }
    
    /**
     * Final helper method for the saving of the image
     * pre: none
     * post: image that was converted to a 2D array saved to specified location
     */
    private void saveImage() {
        int returnValue = saveFileChooser.showSaveDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            try {
                ImageIO.write(image, "png", saveFileChooser.getSelectedFile());
                System.out.println("Successfully saved");
            } catch (IOException ioe) {
                System.err.println("Error with IO");
//                messageLabel.setText("Failed to save image file");
            }
        } else {
//            messageLabel.setText("No file chosen!");
        }
    }
    
    /**
     * calls the clear method which paints the canvas completely white
     * pre: none
     * post: canvas cleared
     * @param evt 
     */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clear();
    }//GEN-LAST:event_clearButtonActionPerformed
/**
 * choosing of a color using a color chooser.
 * pre: none
 * post: sets color to selected color
 * @param evt 
 */
    private void pickColourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickColourButtonActionPerformed
        Color bgColor = JColorChooser.showDialog(this, "Choose Color", getBackground());
        if (bgColor != null) {
            g2.setColor(bgColor);
        }

    }//GEN-LAST:event_pickColourButtonActionPerformed
/**
 * Combo box for selecting operation
 * pre: none
 * post: operation is set to the selected operation
 * @param evt 
 */
    private void strokeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strokeSelectorActionPerformed
        switch ((String) strokeSelector.getSelectedItem()) {
            case "Goatfur Handmade Brush":
                operation = "brush";
                break;
            case "Fill":
                operation = "fill";
                break;
            case "Rectangle":
                operation = "rectangle";
                break;
            case "Square":
                operation = "square";
                break;
            case "Triangle":
                operation = "triangle";
                break;
            case "Oval":
                operation = "oval";
                break;
            case "Circle":
                operation = "circle";
                break;
        }
    }//GEN-LAST:event_strokeSelectorActionPerformed

/**
 * paints canvas when repaint() is called internally antialiasing is set to true because it looks better that way
 * pre: none
 * post: canvas is repainted. 
 * @param g 
 */
    protected void paintComponent(Graphics g) {
        if (image == null) {
            //image to draw null ==> create
//            image = createImage(image.getHeight(),image.getWidth());
            g2 = (Graphics2D) image.getGraphics();
            //turn on antialiasing
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            //clear draw area
            clear();
        }
        g.drawImage(image, 0, 0, null);
    }
/**
 * clear method which clears the canvas
 * pre: none
 * post: 
 */
    public final void clear() {
        Color temp = g2.getColor();
        g2.setPaint(Color.white);
        //clear with white
        g2.fillRect(0, 0, getSize().width, getSize().height);
        g2.setPaint(temp);
        paintArrayList.clear();
        repaint();
    }
/**
 * The mouse listener and mouse motion listener
 * pre: none
 * post: listens to things that the mouse does
 */
    public class MouseMotionEventDemo implements MouseMotionListener, MouseListener {

        public void paintMethodDecide(int x, int y) {
            /**
             * decides which method to call if they are one of: brush or fill
             * pre: none
             * post: the appropriate method is called
             */
            switch (operation) {
                case "brush":
                    paintWithBrush();
                    break;
                case "fill":
                    FloodFiller.floodFillImage(image, x, y, g2.getColor());
                    repaint();
                    break;
            }

        }

        @Override
        public void mouseDragged(MouseEvent me) {
            if (operation.equals("brush")) {
                nowX = me.getX();
                nowY = me.getY();
                paintMethodDecide(nowX, nowY);
            } else {
                endDrag = new Point(me.getX(), me.getY());
                repaint();
            }
        }

        @Override
        public void mouseMoved(MouseEvent me) {
        }

        @Override
        public void mouseClicked(MouseEvent me) {
            int x = me.getX();
            int y = me.getY();
            if (operation.equals("fill")) {
                paintMethodDecide(x, y);
            }
        }

        @Override
        public void mousePressed(MouseEvent me) {
            startDrag = new Point(me.getX(), me.getY());
            oldX = me.getX();
            oldY = me.getY();
        }

        @Override
        public void mouseReleased(MouseEvent me) {
            Point p = new Point(me.getX(), me.getY());
            switch (operation) {
                case "rectangle":
                    MyRectangle obj = new MyRectangle();
                    obj.makeObject(startDrag, p);
                    paintArrayList.add(obj);
                    paintShapes();
                    break;
                case "square":
                    MySquare obj2 = new MySquare();
                    obj2.makeObject(startDrag, p);
                    paintArrayList.add(obj2);
                    paintShapes();
                    break;
                case "triangle":
                    MyTriangle obj3 = new MyTriangle();
                    obj3.makeObject(startDrag, p);
                    paintArrayList.add(obj3);
                    paintShapes();
                    break;
                case "oval":
                    MyOval obj4 = new MyOval();
                    obj4.makeObject(startDrag, p);
                    paintArrayList.add(obj4);
                    paintShapes();
                    break;
                case "circle":
                    MyCircle obj5 = new MyCircle();
                    obj5.makeObject(startDrag, p);
                    paintArrayList.add(obj5);
                    paintShapes();
                    break;
            }
            startDrag = null;
            endDrag = null;
            repaint();
        }

        @Override
        public void mouseEntered(MouseEvent me) {
        }

        @Override
        public void mouseExited(MouseEvent me) {
        }
    }
    
    /**
     * paints line with brush
     * pre: none
     * post: line is painted depending on the values of old coordinates and new coordinates
     */
    private void paintWithBrush() {
        if (g2 != null) {
            g2.drawLine(oldX, oldY, nowX, nowY);
            repaint();
            oldX = nowX;
            oldY = nowY;
        }
    }
    /**
     * initializes the draw area
     * pre: none
     * post: the draw area(essentially canvas) is initialized
     */
    private class DrawArea extends JComponent {

        public DrawArea() {
            setDoubleBuffered(false);
            addMouseListener(new MouseMotionEventDemo());
        }
    }
    
    /**
     * paints the shapes depending on the startDrag and endDrag values
     * pre: none
     * post: the shape is painted
     */
    public void paintShapes() {
        GraphicAdapter ga2 = new GraphicAdapter() {
        };
        ga2.setGraphicAdapter(g2);

        for (Paint pt : paintArrayList) {
            pt.draw(ga2);
        }

        if (startDrag != null && endDrag != null) {
            switch (operation) {
                case "rectangle": {
                    MyRectangle obj = new MyRectangle();
                    obj.makeObject(startDrag, endDrag);
//                        g2.setColor(temp);
                    obj.draw(ga2);
                    break;
                }
                case "square": {
                    MySquare obj = new MySquare();
                    obj.makeObject(startDrag, endDrag);
                    obj.draw(ga2);
                    break;
                }
                case "triangle": {
                    MyTriangle obj = new MyTriangle();
                    obj.makeObject(startDrag, endDrag);
                    obj.draw(ga2);
                    break;
                }
                case "oval": {
                    MyOval obj = new MyOval();
                    obj.makeObject(startDrag, endDrag);
                    obj.draw(ga2);
                    break;
                }
                case "circle": {
                    MyCircle obj = new MyCircle();
                    obj.makeObject(startDrag, endDrag);
                    obj.draw(ga2);
                    break;
                }
                default:
                    break;
            }
        }
        paintArrayList.clear();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PaintGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PaintGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PaintGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PaintGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
        JFrame.setDefaultLookAndFeelDecorated(true);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaintGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel canvas;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton openFileButton;
    private javax.swing.JButton pickColourButton;
    private javax.swing.JButton saveImageButton;
    private javax.swing.JComboBox<String> sizeSelector;
    private javax.swing.JComboBox<String> strokeSelector;
    // End of variables declaration//GEN-END:variables
}
